"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[443],{5874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"architecture","title":"Project Architecture","description":"This document outlines the typical project structure generated and encouraged by the vss-api-cli tool, following Hexagonal Architecture principles.","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/vss-api-cli/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/your-username/vss-ol-cli/tree/main/doc/docs/architecture.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/vss-api-cli/intro"},"next":{"title":"Commands","permalink":"/vss-api-cli/category/commands"}}');var s=t(4848),i=t(8453);const o={sidebar_position:2},c="Project Architecture",a={},l=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"Key Directories Explained",id:"key-directories-explained",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"project-architecture",children:"Project Architecture"})}),"\n",(0,s.jsxs)(n.p,{children:["This document outlines the typical project structure generated and encouraged by the ",(0,s.jsx)(n.code,{children:"vss-api-cli"})," tool, following Hexagonal Architecture principles."]}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hexagonal Architecture (Ports and Adapters):"})," The core application logic (domain) is isolated from external concerns (like databases, APIs, frameworks) using ports (interfaces) and adapters (implementations)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separation of Concerns:"})," Different parts of the application (handlers, domain logic, infrastructure) are kept distinct."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,s.jsxs)(n.p,{children:["The CLI generates files following this structure within your ",(0,s.jsx)(n.code,{children:"src/"})," directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plaintext",children:"src/\n\u251c\u2500\u2500 handlers/                  # Entrypoints (e.g., Lambda functions) - Inbound Adapters\n\u2502   \u251c\u2500\u2500 createUser.handler.ts\n\u2502   \u251c\u2500\u2500 getUser.handler.ts\n\u2502   \u2514\u2500\u2500 schemas/               # Input validation schemas (e.g., Zod)\n\u2502       \u2514\u2500\u2500 customRequestSchema.ts\n\u2502\n\u251c\u2500\u2500 {domain}/                  # Domain layer (core business logic)\n\u2502   \u251c\u2500\u2500 models/                # Domain entities or aggregates\n\u2502   \u2502   \u2514\u2500\u2500 User.ts\n\u2502   \u251c\u2500\u2500 exceptions/            # Custom domain-specific exceptions\n\u2502   \u2502   \u2514\u2500\u2500 UserNotFoundException.ts\n\u2502   \u251c\u2500\u2500 services/              # Domain services orchestrating logic\n\u2502   \u2502   \u2514\u2500\u2500 UserService.ts\n\u2502   \u2514\u2500\u2500 ports/                 # Interfaces defining contracts for external dependencies (Outbound Ports)\n\u2502       \u2514\u2500\u2500 UserRepositoryPort.ts\n\u2502\n\u251c\u2500\u2500 infra/                     # Infrastructure layer (Outbound Adapters)\n\u2502   \u251c\u2500\u2500 repositories/          # Data persistence implementations\n\u2502   \u2502   \u2514\u2500\u2500 DynamoUserRepositoryAdapter.ts # Implements UserRepositoryPort\n\u2502   \u251c\u2500\u2500 rest/                  # External API clients\n\u2502   \u2502   \u2514\u2500\u2500 PaymentGatewayAdapter.ts\n\u2502   \u2514\u2500\u2500 ...                    # Other infrastructure adapters (e.g., message queues, external services)\n\u2502\n\u251c\u2500\u2500 config/                    # Configuration files\n\u2502   \u251c\u2500\u2500 default.json\n\u2502   \u2514\u2500\u2500 dev.json\n\u2502\n\u251c\u2500\u2500 shared/                    # Utilities, types, logger, etc. reusable across the application\n\u2502   \u251c\u2500\u2500 utils.ts\n\u2502   \u2514\u2500\u2500 logger.ts\n\u2502\n\u2514\u2500\u2500 index.ts                   # Main application entry point or composition root (if applicable)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-directories-explained",children:"Key Directories Explained"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"handlers/"})}),": Contains the entry points for your application (e.g., AWS Lambda handlers, API route controllers). These are ",(0,s.jsx)(n.em,{children:"Inbound Adapters"})," that translate external requests into calls to your domain services."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"{domain}/"})}),": This is the heart of your application. It contains the core business logic, models, and rules, completely independent of any framework or infrastructure details.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"models/"})}),": Defines the core data structures (entities, value objects)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"services/"})}),": Contains the application and domain services that orchestrate use cases."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ports/"})}),": Defines the interfaces (",(0,s.jsx)(n.em,{children:"Outbound Ports"}),") that the domain logic needs to interact with the outside world (e.g., ",(0,s.jsx)(n.code,{children:"UserRepositoryPort"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"infra/"})}),": Contains the concrete implementations (",(0,s.jsx)(n.em,{children:"Outbound Adapters"}),") of the ports defined in the domain layer. This is where database interactions, external API calls, etc., happen."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"shared/"})}),": Holds common utilities, types, or configurations used across different layers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"config/"})}),": Stores environment-specific or application-wide configurations."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This structure ensures that the core domain logic remains pure and testable, decoupled from the complexities of external systems."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);